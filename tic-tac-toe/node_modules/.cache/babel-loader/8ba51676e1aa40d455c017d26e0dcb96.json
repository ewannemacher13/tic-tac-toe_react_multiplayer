{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\progs\\\\nodeProgs\\\\tic-tac-toe_react_multi\\\\tic-tac-toe\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from 'react';\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n  const winStates = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a, b, c] = winStates[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isDraw(boardState) {\n  for (var i = 0; i < boardState.length; i++) {\n    if (boardState === null) {\n      return false;\n    }\n  }\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId, player, move) => {\n    cb(null, gameId, player, move);\n  });\n}\n\nfunction subToRequestGameState(cb) {\n  socket.on('board-get', gameId => {\n    cb(null, gameId);\n  });\n}\n\nfunction subToReturnGameState(cb) {\n  socket.on('board-got', (gameId, board, playerTurn) => {\n    cb(null, gameId, board, playerTurn);\n  });\n}\n\nfunction subToResetAsk(cb) {\n  socket.on('reset-ask', gameId => {\n    cb(null, gameId);\n  });\n}\n\nfunction subToResetRes(cb) {\n  socket.on('board-reset', gameId => {\n    cb(null, gameId);\n  });\n} // TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n//    Also get who's turn it is\n// add consent to reset board\n//    if button clicked, ask for reset\n//    if asked for reset, button click will send \"reset\" to all with gameId\n//    if a \"reset\" is received, reset\n// prevent move if not client's turn\n// switch which client is x?\n\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n} // end Square\n\n\n_c = Square;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      resetAsk: false,\n      playerTurn: 'X',\n      winner: null\n    };\n  }\n\n  componentDidMount() {\n    // if other player made a move\n    subToMove((err, gameId, player, move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.state.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          playerTurn: this.props.player === 'X' ? 'X' : 'O',\n          squares: squares,\n          winner: winner,\n          opponentConnected: ''\n        }); // this.props.onMove(squares);\n      }\n    });\n    subToRequestGameState((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`board request:${this.state.squares}`);\n        socket.emit('got-board', this.props.gameId, this.state.squares, this.state.playerTurn);\n      }\n    });\n    subToReturnGameState((err, gameId, board, playerTurn) => {\n      if (gameId === this.props.gameId) {\n        console.log(`board received ${board}`);\n        this.setState({\n          squares: board,\n          playerTurn: playerTurn\n        });\n      }\n    });\n    console.log(`joinGameId: ${this.props.joinGameId}`);\n\n    if (this.props.joinGameId !== '') {\n      socket.emit('get-board', this.props.joinGameId);\n    }\n\n    subToResetAsk((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        this.setState({\n          resetAsk: true\n        });\n      }\n    });\n    subToResetRes((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`reset board`);\n        this.setState({\n          playerTurn: 'X',\n          squares: Array(9).fill(null),\n          winner: null\n        });\n      }\n    });\n    subToOpponentDisconnect((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        this.setState({\n          opponentConnected: 'false'\n        });\n      }\n    });\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice(); // if we are not allowed to make a move (its our turn, there is no winner, and the square is empty)\n\n    if (this.state.playerTurn !== this.props.player || determineWinner(squares) || squares[i]) {\n      return;\n    }\n\n    socket.emit('make-move', this.props.gameId, this.props.player, i);\n    squares[i] = this.props.player;\n    const winner = determineWinner(squares);\n    this.setState({\n      playerTurn: this.props.player === 'X' ? 'O' : 'X',\n      squares: squares,\n      winner: winner\n    }); // console.log(`squares after move: ${squares}`);\n    // this.props.onMove(squares);\n  }\n\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.state.squares[i],\n      onClick: () => this.handleClick(i, this.props.player)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 12\n    }, this);\n  }\n\n  resetGame() {\n    if (!this.state.resetAsk) {\n      socket.emit('ask-reset', this.props.gameId);\n    } else {\n      this.state.resetAsk = false;\n      socket.emit('reset-board', this.props.gameId);\n    }\n  }\n\n  render() {\n    const winner = this.state.winner;\n    let status;\n\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    } else if (isDraw(this.state.squares)) {\n      status = `Draw! Click reset to clear the board`;\n    } else {\n      status = `Player ${this.state.playerTurn}'s turn`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are player \", this.props.player]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: () => this.resetGame(),\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), this.state.resetAsk && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The other player wants to reset. Click the button to accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your game id is: \", this.state.gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), this.state.opponentConnected === '' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Have opponent join using that game id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 46\n      }, this), this.state.opponentConnected === 'true' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Opponent connected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 50\n      }, this), this.state.opponentConnected === 'false' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Opponent disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 51\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.disconnect(),\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this);\n  }\n\n} // end Board\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getGameId = async () => {\n      // asks the server to generate a unique game id\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          msg: 'h'\n        })\n      };\n      const response = await fetch('/gen', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.checkGameId = async () => {\n      // asks the server if the join game id is valid\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          gameId: this.state.joinGameId\n        })\n      };\n      const response = await fetch('/checkGameId', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body.isValidGame;\n    };\n\n    this.state = {\n      gameId: '',\n      joinGameId: '',\n      toggle: 'False',\n      player: 'X',\n      squares: Array(9).fill(null)\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      joinGameId: event.target.value\n    });\n  }\n\n  createRoom() {\n    // joins the room if it exists\n    this.getGameId(this.state.joinGameId).then(res => {\n      if (res) {\n        // socket.emit('get-board',this.state.joinGameId);\n        this.setState({\n          gameId: res.id,\n          player: 'X'\n        });\n      }\n\n      ;\n    }).catch(err => console.log(err));\n  }\n\n  joinRoom() {\n    // joins the room if it exists\n    this.checkGameId(this.state.joinGameId).then(res => {\n      if (res) {\n        // socket.emit('get-board',this.state.joinGameId);\n        this.setState({\n          gameId: this.state.joinGameId,\n          player: 'O'\n        });\n      }\n\n      ;\n    }).catch(err => console.log(err));\n  }\n\n  componentDidMount() {}\n\n  disconnect() {\n    this.setState({\n      gameId: '',\n      joinGameId: '',\n      player: 'X',\n      squares: Array(9).fill(null)\n    });\n    socket.emit('disconnect-opponent', this.state.gameId);\n  } //onMove={() => this.makeMove()}\n\n\n  render() {\n    let connected;\n\n    if (this.state.gameId !== '') {\n      connected = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          gameId: this.state.gameId,\n          player: this.state.player,\n          joinGameId: this.state.joinGameId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 19\n      }, this);\n    } else {\n      connected = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Create or join a room to play!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.createRoom(),\n          children: \"Create Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" or \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.joinRoom(),\n          children: \"Join Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Game id\",\n          value: this.state.joinGameId,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to Tic-Tac-Toe!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: connected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this);\n  }\n\n} // end Game\n\n\nexport default Game; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["C:/progs/nodeProgs/tic-tac-toe_react_multi/tic-tac-toe/src/App.js"],"names":["React","openSocket","socket","determineWinner","boardState","winStates","i","length","a","b","c","isDraw","subToMove","cb","on","gameId","player","move","subToRequestGameState","subToReturnGameState","board","playerTurn","subToResetAsk","subToResetRes","Square","props","onClick","value","Board","Component","constructor","state","squares","Array","fill","resetAsk","winner","componentDidMount","err","slice","setState","opponentConnected","console","log","emit","joinGameId","subToOpponentDisconnect","handleClick","renderSquare","resetGame","render","status","disconnect","Game","getGameId","postOptions","method","headers","body","JSON","stringify","msg","response","fetch","json","Error","message","checkGameId","isValidGame","toggle","handleChange","bind","event","target","createRoom","then","res","id","catch","joinRoom","connected"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  \n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n\n  const winStates = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a,b,c] = winStates[i];\n    if (boardState[a] &&boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n  return null;\n}\n\nfunction isDraw(boardState) {\n  for (var i = 0; i < boardState.length; i++) {\n    if (boardState === null) {\n      return false;\n    }\n  }\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId,player,move) => {\n    cb(null,gameId,player,move);\n  });\n}\n\nfunction subToRequestGameState(cb) {\n  socket.on('board-get', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\nfunction subToReturnGameState(cb) {\n  socket.on('board-got', (gameId,board,playerTurn) => {\n    cb(null,gameId,board,playerTurn);\n  });\n}\n\nfunction subToResetAsk(cb) {\n  socket.on('reset-ask', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\nfunction subToResetRes(cb) {\n  socket.on('board-reset', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\n// TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n//    Also get who's turn it is\n// add consent to reset board\n//    if button clicked, ask for reset\n//    if asked for reset, button click will send \"reset\" to all with gameId\n//    if a \"reset\" is received, reset\n// prevent move if not client's turn\n// switch which client is x?\n\nfunction Square(props) {\n  return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n  );\n} // end Square\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      resetAsk: false,\n      playerTurn: 'X',\n      winner:null,\n    };\n  }\n\n  componentDidMount() {\n    // if other player made a move\n    subToMove((err,gameId,player,move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.state.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          playerTurn: (this.props.player==='X')? 'X':'O',\n          squares:squares,\n          winner: winner,\n          opponentConnected: ''\n        });\n        // this.props.onMove(squares);\n      }\n    });\n\n    subToRequestGameState((err,gameId) => {\n      if (gameId===this.props.gameId) {\n        console.log(`board request:${this.state.squares}`);\n        socket.emit('got-board',this.props.gameId,this.state.squares,this.state.playerTurn);\n        \n      }\n    });\n\n    subToReturnGameState((err,gameId,board,playerTurn) => {\n      if (gameId===this.props.gameId) {\n        console.log(`board received ${board}`);\n        this.setState({\n          squares: board,\n          playerTurn: playerTurn\n        });\n      }\n    });\n\n    console.log(`joinGameId: ${this.props.joinGameId}`);\n    if (this.props.joinGameId !== '') {\n      socket.emit('get-board',this.props.joinGameId);\n    }\n\n    subToResetAsk((err,gameId) => {\n      if (gameId === this.props.gameId) {\n        this.setState({resetAsk: true});\n      }\n    });\n\n    subToResetRes((err,gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`reset board`);\n        this.setState({\n          playerTurn: 'X',\n          squares: Array(9).fill(null),\n          winner: null\n        });\n      }\n    });\n\n    subToOpponentDisconnect((err,gameId) => {\n      if (gameId === this.props.gameId) {\n        this.setState({\n          opponentConnected: 'false',\n        });\n      }\n    })\n\n\n\n  }\n\n  handleClick(i) {\n      const squares = this.state.squares.slice();\n\n      // if we are not allowed to make a move (its our turn, there is no winner, and the square is empty)\n      if ((this.state.playerTurn !== this.props.player) || (determineWinner(squares) || squares[i])) {\n        return;\n      }\n      socket.emit('make-move',this.props.gameId,this.props.player, i);\n\n      squares[i] = this.props.player;\n      const winner = determineWinner(squares);\n      this.setState({\n        playerTurn: (this.props.player === 'X')? 'O' : 'X',\n        squares:squares,\n        winner: winner\n      });\n      // console.log(`squares after move: ${squares}`);\n      // this.props.onMove(squares);\n  }\n\n  renderSquare(i) {\n    return <Square \n      value={this.state.squares[i]}\n      onClick={() => this.handleClick(i,this.props.player)}\n      />;\n  }\n\n  resetGame() {\n    if(!this.state.resetAsk) {\n      socket.emit('ask-reset',this.props.gameId);\n    }\n    else {\n      this.state.resetAsk = false;\n      socket.emit('reset-board',this.props.gameId);\n    }\n  }\n\n  render() {\n    \n    const winner = this.state.winner;\n    let status;\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    }\n    else if (isDraw(this.state.squares)) {\n      status = `Draw! Click reset to clear the board`;\n    }\n    else {\n      status = `Player ${this.state.playerTurn}'s turn`;\n    }\n    return (\n      <div className=\"board\">\n        <p>You are player {this.props.player}</p>\n        <p>{status}</p>\n        <div className=\"board board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        \n        <button className=\"reset-button\" onClick={() => this.resetGame() }>Reset Game</button>\n        {this.state.resetAsk && \n          <p>The other player wants to reset. Click the button to accept</p>\n        }\n\n        <p>Your game id is: {this.state.gameId}</p>\n        {this.state.opponentConnected==='' &&<p>Have opponent join using that game id</p>}\n        {this.state.opponentConnected==='true' &&<p>Opponent connected</p>}\n        {this.state.opponentConnected==='false' &&<p>Opponent disconnected</p>}\n        <button onClick={() => this.disconnect()}>Disconnect</button>\n\n      </div>\n    );\n  }\n} // end Board\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: '',\n      joinGameId: '',\n      toggle: 'False',\n      player:'X',\n      squares: Array(9).fill(null),\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({joinGameId: event.target.value});\n  }\n\n  createRoom() {\n    // joins the room if it exists\n    this.getGameId(this.state.joinGameId)\n    .then(res => {\n      if (res) {\n        // socket.emit('get-board',this.state.joinGameId);\n        this.setState({gameId: res.id,player:'X'});\n      };\n    })\n    .catch(err => console.log(err));\n  }\n\n  joinRoom() {\n    // joins the room if it exists\n    this.checkGameId(this.state.joinGameId)\n    .then(res => {\n      if (res) {\n        // socket.emit('get-board',this.state.joinGameId);\n        this.setState({gameId: this.state.joinGameId,player:'O'});\n      };\n    })\n    .catch(err => console.log(err));\n\n  }\n\n  getGameId = async () => {\n    // asks the server to generate a unique game id\n\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({msg:'h'})\n    };\n\n    const response = await fetch('/gen',postOptions);\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n\n  }\n\n  checkGameId = async () => {\n    // asks the server if the join game id is valid\n\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({gameId:this.state.joinGameId})\n    };\n\n    const response = await fetch('/checkGameId',postOptions);\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body.isValidGame;\n\n  }\n\n  componentDidMount() {   \n  \n  }\n\n  disconnect() {\n    this.setState({\n      gameId: '',\n      joinGameId: '',\n      player:'X',\n      squares: Array(9).fill(null),\n    });\n    socket.emit('disconnect-opponent',this.state.gameId);\n  }\n\n//onMove={() => this.makeMove()}\n  render() {\n    let connected;\n    if (this.state.gameId!=='') {\n      connected = <div>\n        <Board gameId={this.state.gameId} player={this.state.player} joinGameId={this.state.joinGameId}  />\n        \n      </div>;\n    }\n    else {\n      connected = <div>\n        <p>Create or join a room to play!</p>\n        <button onClick={() => this.createRoom()}>Create Room</button>\n        <p> or </p>\n        <button onClick={() => this.joinRoom()}>Join Room</button>\n          <input type=\"text\" placeholder=\"Game id\" value={this.state.joinGameId} onChange={this.handleChange} />\n      </div>;\n    }\n    return (\n        <div className=\"Game\">          \n          <p>Welcome to Tic-Tac-Toe!</p>\n          <div >\n            {connected}\n          </div>\n          {/* <p>Your game id is: {this.state.gameId}</p> */}\n        </div>\n      \n    );\n  }\n} // end Game\n\nexport default Game;\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}