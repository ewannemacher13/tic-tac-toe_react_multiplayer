{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\progs\\\\nodeProgs\\\\tic-tac-toe_git\\\\tic-tac-toe_react_multiplayer\\\\tic-tac-toe\\\\src\\\\Game.js\";\nimport './App.css';\nimport React from 'react';\nimport Board from './Board';\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getGameId = async () => {\n      // asks the server to generate a unique game id\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          msg: 'h'\n        })\n      };\n      const response = await fetch('/gen', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.checkGameId = async () => {\n      // asks the server if the join game id is valid\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          gameId: this.state.joinGameId\n        })\n      };\n      const response = await fetch('/checkGameId', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message); // if player is false, the game is not valid\n\n      return body.player;\n    };\n\n    this.state = {\n      gameId: '',\n      joinGameId: '',\n      toggle: 'False',\n      player: 'X',\n      squares: Array(9).fill(null)\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      joinGameId: event.target.value.toLowerCase()\n    });\n  }\n\n  createRoom() {\n    // joins the room if it exists\n    this.getGameId(this.state.joinGameId).then(res => {\n      if (res) {\n        // socket.emit('get-board',this.state.joinGameId);\n        this.setState({\n          gameId: res.id,\n          player: 'X'\n        });\n      }\n\n      ;\n    }).catch(err => console.log(err));\n  }\n\n  joinRoom() {\n    // joins the room if it exists\n    this.checkGameId(this.state.joinGameId).then(res => {\n      if (res) {\n        // socket.emit('get-board',this.state.joinGameId);\n        this.setState({\n          gameId: this.state.joinGameId,\n          player: 'O'\n        });\n      }\n\n      ;\n    }).catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  disconnect() {\n    this.setState({\n      gameId: '',\n      joinGameId: '',\n      player: 'X',\n      squares: Array(9).fill(null)\n    });\n    socket.emit('disconnect-client', this.state.gameId);\n  } //onMove={() => this.makeMove()}\n\n\n  render() {\n    let connected;\n\n    if (this.state.gameId !== '') {\n      connected = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          gameId: this.state.gameId,\n          player: this.state.player,\n          joinGameId: this.state.joinGameId,\n          onDisconnect: this.disconnect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this);\n    } else {\n      connected = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Create or join a room to play!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.createRoom(),\n          children: \"Create Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" or \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.joinRoom(),\n          children: \"Join Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Game id\",\n          value: this.state.joinGameId,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to Tic-Tac-Toe!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: connected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }, this);\n  }\n\n} // end Game\n\n\nexport default Game;","map":{"version":3,"sources":["C:/progs/nodeProgs/tic-tac-toe_git/tic-tac-toe_react_multiplayer/tic-tac-toe/src/Game.js"],"names":["React","Board","openSocket","socket","Game","Component","constructor","props","getGameId","postOptions","method","headers","body","JSON","stringify","msg","response","fetch","json","status","Error","message","checkGameId","gameId","state","joinGameId","player","toggle","squares","Array","fill","handleChange","bind","disconnect","event","setState","target","value","toLowerCase","createRoom","then","res","id","catch","err","console","log","joinRoom","componentDidMount","_isMounted","emit","render","connected"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport React from 'react';\r\nimport Board from './Board';\r\nimport openSocket from \"socket.io-client\";\r\nconst socket = openSocket();\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        gameId: '',\r\n        joinGameId: '',\r\n        toggle: 'False',\r\n        player:'X',\r\n        squares: Array(9).fill(null),\r\n      };\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.disconnect = this.disconnect.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.setState({joinGameId: event.target.value.toLowerCase()});\r\n    }\r\n  \r\n    createRoom() {\r\n      // joins the room if it exists\r\n      this.getGameId(this.state.joinGameId)\r\n      .then(res => {\r\n        if (res) {\r\n          // socket.emit('get-board',this.state.joinGameId);\r\n          this.setState({gameId: res.id,player:'X'});\r\n        };\r\n      })\r\n      .catch(err => console.log(err));\r\n    }\r\n  \r\n    joinRoom() {\r\n      // joins the room if it exists\r\n      this.checkGameId(this.state.joinGameId)\r\n      .then(res => {\r\n        if (res) {\r\n          // socket.emit('get-board',this.state.joinGameId);\r\n          this.setState({gameId: this.state.joinGameId,player:'O'});\r\n        };\r\n      })\r\n      .catch(err => console.log(err));\r\n  \r\n    }\r\n  \r\n    getGameId = async () => {\r\n      // asks the server to generate a unique game id\r\n  \r\n      const postOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({msg:'h'})\r\n      };\r\n  \r\n      const response = await fetch('/gen',postOptions);\r\n      const body = await response.json();\r\n  \r\n      if (response.status !== 200) throw Error(body.message);\r\n      \r\n      return body;\r\n  \r\n    }\r\n  \r\n    checkGameId = async () => {\r\n      // asks the server if the join game id is valid\r\n  \r\n      const postOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({gameId:this.state.joinGameId})\r\n      };\r\n  \r\n      const response = await fetch('/checkGameId',postOptions);\r\n      const body = await response.json();\r\n  \r\n      if (response.status !== 200) throw Error(body.message);\r\n      \r\n      // if player is false, the game is not valid\r\n      return body.player;\r\n  \r\n    }\r\n  \r\n    componentDidMount() {   \r\n      this._isMounted = true;\r\n    }\r\n  \r\n    disconnect() {\r\n      this.setState({\r\n        gameId: '',\r\n        joinGameId: '',\r\n        player:'X',\r\n        squares: Array(9).fill(null),\r\n      });\r\n      socket.emit('disconnect-client',this.state.gameId);\r\n    }\r\n  \r\n  //onMove={() => this.makeMove()}\r\n    render() {\r\n      let connected;\r\n      if (this.state.gameId!=='') {\r\n        connected = <div>\r\n          <Board gameId={this.state.gameId} player={this.state.player} joinGameId={this.state.joinGameId} onDisconnect={this.disconnect} />\r\n          \r\n        </div>;\r\n      }\r\n      else {\r\n        connected = <div>\r\n          <p>Create or join a room to play!</p>\r\n          <button onClick={() => this.createRoom()}>Create Room</button>\r\n          <p> or </p>\r\n          <button onClick={() => this.joinRoom()}>Join Room</button>\r\n            <input type=\"text\" placeholder=\"Game id\" value={this.state.joinGameId} onChange={this.handleChange} />\r\n        </div>;\r\n      }\r\n      return (\r\n          <div className=\"Game\">          \r\n            <p>Welcome to Tic-Tac-Toe!</p>\r\n            <div >\r\n              {connected}\r\n            </div>\r\n            {/* <p>Your game id is: {this.state.gameId}</p> */}\r\n          </div>\r\n        \r\n      );\r\n    }\r\n  } // end Game\r\n  \r\n  export default Game;"]},"metadata":{},"sourceType":"module"}