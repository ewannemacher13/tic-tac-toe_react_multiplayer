{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\progs\\\\nodeProgs\\\\tic-tac-toe_react_multi\\\\tic-tac-toe\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from 'react';\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n  const winStates = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a, b, c] = winStates[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nfunction subToTimer(cb) {\n  socket.on('timer', timestamp => cb(null, timestamp));\n  socket.emit('subscribeToTimer', 1000);\n}\n\nfunction subToToggle(tog, cb) {\n  socket.on('toggleButton', (gameId, toggle) => {\n    console.log(`toggle return`);\n    cb(null, gameId, toggle);\n  }); // socket.emit('toggle', tog);\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId, player, move) => {\n    cb(null, gameId, player, move);\n  });\n}\n\nfunction subToRequestGameState(cb) {\n  socket.on('board-get', gameId => {\n    cb(null, gameId);\n  });\n}\n\nfunction subToReturnGameState(cb) {\n  socket.on('board-got', (gameId, board) => {\n    cb(null, gameId, board);\n  });\n} // TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n// add consent to reset board\n// prevent move if not client's turn\n// switch which client is x?\n\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n} // end Square\n\n\n_c = Square;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null\n    };\n  }\n\n  componentDidMount() {\n    subToMove((err, gameId, player, move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.props.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          winner: winner\n        });\n        this.props.onMove(squares);\n      }\n    });\n  }\n\n  handleClick(i) {\n    const squares = this.props.squares.slice();\n\n    if (determineWinner(squares) || squares[i]) {\n      return;\n    }\n\n    socket.emit('make-move', this.props.gameId, this.props.player, i);\n    squares[i] = this.props.player;\n    const winner = determineWinner(squares);\n    this.setState({\n      winner: winner\n    });\n    this.props.onMove(squares);\n  }\n\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.handleClick(i, this.props.player)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n\n  resetGame() {\n    this.setState({\n      squares: Array(9).fill(null),\n      winner: null\n    });\n  }\n\n  render() {\n    const winner = this.state.winner;\n    let status;\n\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    } else {\n      status = `Player ${this.props.player}'s turn`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: () => this.resetGame(),\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n} // end Board\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callAPI = async () => {\n      const response = await fetch('/b');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      console.log(`api got: ${body.message}`);\n      return body;\n    };\n\n    this.getGameId = async () => {\n      // asks the server to generate a unique game id\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          msg: 'h'\n        })\n      };\n      const response = await fetch('/gen', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.checkGameId = async () => {\n      // asks the server if the join game id is valid\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          gameId: this.state.joinGameId\n        })\n      };\n      const response = await fetch('/checkGameId', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body.isValidGame;\n    };\n\n    this.state = {\n      apiResponse: '',\n      socketResponse: '',\n      gameId: '',\n      joinGameId: '',\n      timestamp: 'none',\n      toggle: 'False',\n      player: 'X',\n      squares: Array(9).fill(null)\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      joinGameId: event.target.value\n    });\n  }\n\n  makeMove(squares) {\n    this.setState({\n      squares: squares\n    });\n  }\n\n  toggle() {\n    console.log(`toggle func`); // socket.on('toggleButton', () => {\n    //   this.setState({toggle: (this.state.toggle === 'False') ? 'True' : 'False'});\n    // });\n\n    const tog = this.state.toggle;\n    socket.emit('toggle', this.state.gameId, tog);\n  }\n\n  createRoom() {}\n\n  joinRoom() {\n    // joins the room if it exists\n    this.checkGameId(this.state.joinGameId).then(res => {\n      if (res) {\n        socket.emit('get-board', this.state.joinGameId);\n        this.setState({\n          gameId: this.state.joinGameId,\n          player: 'O'\n        });\n      }\n\n      ;\n    }).catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.callAPI() // .then(res => console.log(res.express))\n    .then(res => this.setState({\n      apiResponse: res.express\n    })).catch(err => console.log(err)); // this.getGameId()\n    // .then(res => this.setState({gameId: res.id}))\n    // .catch(err => console.log(err));\n\n    subToTimer((err, timestamp) => this.setState({\n      timestamp: timestamp\n    }));\n    subToToggle(this.state.toggle, (err, gameId, toggle) => {\n      if (gameId === this.state.gameId) {\n        console.log(toggle);\n        this.setState({\n          toggle: toggle === 'False' ? 'True' : 'False'\n        });\n      }\n    });\n    subToRequestGameState((err, gameId) => {\n      if (gameId === this.state.gameId) {\n        console.log(`board request:${this.state.squares}`);\n        socket.emit('got-board', this.state.gameId, this.state.squares);\n      }\n    });\n    subToReturnGameState((err, gameId, board) => {\n      if (gameId === this.state.gameId) {\n        console.log(`board received ${board}`);\n        this.setState({\n          squares: board\n        });\n      }\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    let connected;\n\n    if (this.state.gameId !== '') {\n      connected = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          gameId: this.state.gameId,\n          player: this.state.player,\n          squares: this.state.squares,\n          onMove: this.makeMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your game id is: \", this.state.gameId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Have player join using that game id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.disconnect(),\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 19\n      }, this);\n    } else {\n      connected = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Create or join a room to play!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.createRoom(),\n          children: \"Create Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" or \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.joinRoom(),\n          children: \"Join Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Game id\",\n          value: this.state.joinGameId,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Api Response: \", this.state.apiResponse]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Socket timestamp: \", this.state.timestamp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.toggle(),\n        children: [\"Toggle state: \", this.state.toggle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to Tic-Tac-Toe!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: connected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }, this);\n  }\n\n} // end Game\n\n\nexport default Game; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["C:/progs/nodeProgs/tic-tac-toe_react_multi/tic-tac-toe/src/App.js"],"names":["React","openSocket","socket","determineWinner","boardState","winStates","i","length","a","b","c","subToTimer","cb","on","timestamp","emit","subToToggle","tog","gameId","toggle","console","log","subToMove","player","move","subToRequestGameState","subToReturnGameState","board","Square","props","onClick","value","Board","Component","constructor","state","winner","componentDidMount","err","squares","slice","setState","onMove","handleClick","renderSquare","resetGame","Array","fill","render","status","Game","callAPI","response","fetch","body","json","Error","message","getGameId","postOptions","method","headers","JSON","stringify","msg","checkGameId","joinGameId","isValidGame","apiResponse","socketResponse","handleChange","event","target","makeMove","createRoom","joinRoom","then","res","catch","express","bind","connected","disconnect"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  \n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n\n  const winStates = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a,b,c] = winStates[i];\n    if (boardState[a] &&boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n  return null;\n}\n\nfunction subToTimer(cb) {\n  socket.on('timer', timestamp => cb(null,timestamp));\n  socket.emit('subscribeToTimer',1000);\n}\n\nfunction subToToggle(tog,cb) {\n  socket.on('toggleButton', (gameId,toggle) => {\n    console.log(`toggle return`);\n    cb(null,gameId,toggle)\n  });\n  // socket.emit('toggle', tog);\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId,player,move) => {\n    cb(null,gameId,player,move);\n  });\n}\n\nfunction subToRequestGameState(cb) {\n  socket.on('board-get', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\nfunction subToReturnGameState(cb) {\n  socket.on('board-got', (gameId,board) => {\n    cb(null,gameId,board);\n  });\n}\n\n// TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n// add consent to reset board\n// prevent move if not client's turn\n// switch which client is x?\n\nfunction Square(props) {\n  return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n  );\n} // end Square\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner:null,\n    };\n  }\n\n  componentDidMount() {\n    subToMove((err,gameId,player,move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.props.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          winner: winner,\n        });\n        this.props.onMove(squares);\n      }\n    });\n  }\n\n  handleClick(i) {\n      const squares = this.props.squares.slice();\n      if (determineWinner(squares) || squares[i]) {\n        return;\n      }\n      socket.emit('make-move',this.props.gameId,this.props.player, i);\n\n      squares[i] = this.props.player;\n      const winner = determineWinner(squares);\n      this.setState({\n        winner: winner\n      });\n      this.props.onMove(squares);\n  }\n\n  renderSquare(i) {\n    return <Square \n      value={this.props.squares[i]}\n      onClick={() => this.handleClick(i,this.props.player)}\n      />;\n  }\n\n  resetGame() {\n    this.setState({\n      squares: Array(9).fill(null),\n      winner:null,\n    });\n  }\n\n  render() {\n    const winner = this.state.winner;\n    let status;\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    }\n    else {\n      status = `Player ${this.props.player}'s turn`;\n    }\n    return (\n      <div className=\"board\">\n        <p>{status}</p>\n        <div className=\"board board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        \n        <button className=\"reset-button\" onClick={() => this.resetGame() }>Reset Game</button>\n      </div>\n    );\n  }\n} // end Board\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse:'',\n      socketResponse:'',\n      gameId: '',\n      joinGameId: '',\n      timestamp: 'none',\n      toggle: 'False',\n      player:'X',\n      squares: Array(9).fill(null),\n    };\n  }\n\n  handleChange(event) {\n    this.setState({joinGameId: event.target.value});\n  }\n\n  makeMove(squares) {\n    this.setState({squares:squares});\n  }\n\n  toggle() {\n    console.log(`toggle func`);\n    // socket.on('toggleButton', () => {\n    //   this.setState({toggle: (this.state.toggle === 'False') ? 'True' : 'False'});\n    // });\n    const tog = this.state.toggle;\n    socket.emit('toggle',this.state.gameId,tog);\n  }\n\n  createRoom() {\n\n  }\n\n  joinRoom() {\n    // joins the room if it exists\n    this.checkGameId(this.state.joinGameId)\n    .then(res => {\n      if (res) {\n        socket.emit('get-board',this.state.joinGameId);\n        this.setState({gameId: this.state.joinGameId,player:'O'});\n      };\n    })\n    .catch(err => console.log(err));\n\n  }\n\n  callAPI = async () => {\n    const response = await fetch('/b');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    console.log(`api got: ${body.message}`);\n\n    return body;\n  }\n\n  getGameId = async () => {\n    // asks the server to generate a unique game id\n\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({msg:'h'})\n    };\n\n    const response = await fetch('/gen',postOptions);\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n\n  }\n\n  checkGameId = async () => {\n    // asks the server if the join game id is valid\n\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({gameId:this.state.joinGameId})\n    };\n\n    const response = await fetch('/checkGameId',postOptions);\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body.isValidGame;\n\n  }\n\n  componentDidMount() {\n    this.callAPI()\n      // .then(res => console.log(res.express))\n      .then(res => this.setState({apiResponse: res.express}))\n      .catch(err => console.log(err));\n\n    // this.getGameId()\n    // .then(res => this.setState({gameId: res.id}))\n    // .catch(err => console.log(err));\n\n    subToTimer((err,timestamp) => this.setState({timestamp:timestamp}));\n    subToToggle(this.state.toggle,(err,gameId,toggle) => {\n      if (gameId===this.state.gameId) {\n        console.log(toggle);\n        this.setState({toggle: (toggle==='False') ? 'True' : 'False'});\n      }\n    });\n\n    subToRequestGameState((err,gameId) => {\n      if (gameId===this.state.gameId) {\n        console.log(`board request:${this.state.squares}`);\n        socket.emit('got-board',this.state.gameId,this.state.squares);\n      }\n    });\n\n    subToReturnGameState((err,gameId,board) => {\n      if (gameId===this.state.gameId) {\n        console.log(`board received ${board}`);\n        this.setState({squares: board})\n      }\n    });\n  \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  \n\n  render() {\n    let connected;\n    if (this.state.gameId!=='') {\n      connected = <div>\n        <Board gameId={this.state.gameId} player={this.state.player} squares={this.state.squares} onMove={this.makeMove} />\n        <p>Your game id is: {this.state.gameId}</p>\n        <p>Have player join using that game id</p>\n        <button onClick={() => this.disconnect()}>Disconnect</button>\n      </div>;\n    }\n    else {\n      connected = <div>\n        <p>Create or join a room to play!</p>\n        <button onClick={() => this.createRoom()}>Create Room</button>\n        <p> or </p>\n        <button onClick={() => this.joinRoom()}>Join Room</button>\n          <input type=\"text\" placeholder=\"Game id\" value={this.state.joinGameId} onChange={this.handleChange} />\n      </div>;\n    }\n    return (\n        <div className=\"Game\">\n          <p>Api Response: {this.state.apiResponse}</p>\n          <p>Socket timestamp: {this.state.timestamp}</p>\n          <button onClick={() => this.toggle()}>Toggle state: {this.state.toggle}</button>\n          \n          <p>Welcome to Tic-Tac-Toe!</p>\n          <div >\n            {connected}\n          </div>\n          {/* <p>Your game id is: {this.state.gameId}</p> */}\n        </div>\n      \n    );\n  }\n} // end Game\n\nexport default Game;\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}