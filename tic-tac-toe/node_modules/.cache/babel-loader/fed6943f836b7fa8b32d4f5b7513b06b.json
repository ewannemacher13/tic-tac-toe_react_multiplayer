{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\progs\\\\nodeProgs\\\\tic-tac-toe_git\\\\tic-tac-toe_react_multiplayer\\\\tic-tac-toe\\\\src\\\\Board.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from 'react';\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n  const winStates = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a, b, c] = winStates[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isDraw(boardState) {\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i] === null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId, player, move) => {\n    cb(null, gameId, player, move);\n  });\n}\n\nfunction subToRequestGameState(cb) {\n  socket.on('board-get', gameId => {\n    cb(null, gameId);\n  });\n}\n\nfunction subToReturnGameState(cb) {\n  socket.on('board-got', (gameId, board, playerTurn) => {\n    cb(null, gameId, board, playerTurn);\n  });\n}\n\nfunction subToResetAsk(cb) {\n  socket.on('reset-ask', gameId => {\n    cb(null, gameId);\n  });\n}\n\nfunction subToResetRes(cb) {\n  socket.on('board-reset', gameId => {\n    cb(null, gameId);\n  });\n}\n\nfunction subToOpponentDisconnect(cb) {\n  socket.on('opponent-disconnect', gameId => {\n    cb(null, gameId);\n  });\n} // TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n//    Also get who's turn it is\n// add consent to reset board\n//    if button clicked, ask for reset\n//    if asked for reset, button click will send \"reset\" to all with gameId\n//    if a \"reset\" is received, reset\n// prevent move if not client's turn\n// switch which client is x?\n\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this);\n} // end Square\n\n\n_c = Square;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      resetAsk: false,\n      playerTurn: 'X',\n      winner: null,\n      opponentConnected: ''\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // if other player made a move\n\n    subToMove((err, gameId, player, move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.state.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          playerTurn: this.props.player === 'X' ? 'X' : 'O',\n          squares: squares,\n          winner: winner\n        }); // this.props.onMove(squares);\n      }\n    });\n    subToRequestGameState((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`board request:${this.state.squares}`);\n        socket.emit('got-board', this.props.gameId, this.state.squares, this.state.playerTurn);\n        this.setState({\n          opponentConnected: 'true'\n        });\n      }\n    });\n    subToReturnGameState((err, gameId, board, playerTurn) => {\n      if (gameId === this.props.gameId) {\n        console.log(`board received ${board}`);\n        this.setState({\n          squares: board,\n          playerTurn: playerTurn,\n          opponentConnected: 'true'\n        });\n      }\n    });\n    console.log(`joinGameId: ${this.props.joinGameId}`);\n\n    if (this.props.joinGameId !== '') {\n      socket.emit('get-board', this.props.joinGameId);\n    }\n\n    subToResetAsk((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        this.setState({\n          resetAsk: true\n        });\n      }\n    });\n    subToResetRes((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`reset board`);\n        this.setState({\n          playerTurn: this.state.playerTurn === 'O' ? 'O' : 'X',\n          squares: Array(9).fill(null),\n          winner: null\n        });\n      }\n    });\n    subToOpponentDisconnect((err, gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`opponent disconnect`);\n        this.setState({\n          opponentConnected: 'false'\n        });\n      }\n    });\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice(); // if we are not allowed to make a move (its our turn, there is no winner, and the square is empty)\n\n    if (this.state.playerTurn !== this.props.player || determineWinner(squares) || squares[i]) {\n      return;\n    }\n\n    socket.emit('make-move', this.props.gameId, this.props.player, i);\n    squares[i] = this.props.player;\n    const winner = determineWinner(squares);\n    this.setState({\n      playerTurn: this.props.player === 'X' ? 'O' : 'X',\n      squares: squares,\n      winner: winner\n    }); // console.log(`squares after move: ${squares}`);\n    // this.props.onMove(squares);\n  }\n\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.state.squares[i],\n      onClick: () => this.handleClick(i, this.props.player)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 12\n    }, this);\n  }\n\n  resetGame() {\n    if (!this.state.resetAsk) {\n      socket.emit('ask-reset', this.props.gameId);\n    } else {\n      this.setState({\n        resetAsk: false\n      });\n      socket.emit('reset-board', this.props.gameId);\n    }\n  }\n\n  render() {\n    const winner = this.state.winner;\n    let status;\n\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    } else if (isDraw(this.state.squares)) {\n      status = `Draw! Click reset to clear the board`;\n    } else {\n      status = `Player ${this.state.playerTurn}'s turn`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are player \", this.props.player]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: () => this.resetGame(),\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), this.state.resetAsk && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The other player wants to reset. Click the button to accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your game id is: \", this.props.gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), this.state.opponentConnected === '' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Have opponent join using that game id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 46\n      }, this), this.state.opponentConnected === 'true' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Opponent connected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 50\n      }, this), this.state.opponentConnected === 'false' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Opponent disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 51\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onDisconnect(),\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this);\n  }\n\n} // end Board\n\n\nexport default Board; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["C:/progs/nodeProgs/tic-tac-toe_git/tic-tac-toe_react_multiplayer/tic-tac-toe/src/Board.js"],"names":["React","openSocket","socket","determineWinner","boardState","winStates","i","length","a","b","c","isDraw","subToMove","cb","on","gameId","player","move","subToRequestGameState","subToReturnGameState","board","playerTurn","subToResetAsk","subToResetRes","subToOpponentDisconnect","Square","props","onClick","value","Board","Component","constructor","state","squares","Array","fill","resetAsk","winner","opponentConnected","componentDidMount","_isMounted","err","slice","setState","console","log","emit","joinGameId","handleClick","renderSquare","resetGame","render","status","onDisconnect"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  \n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n\n  const winStates = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a,b,c] = winStates[i];\n    if (boardState[a] &&boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n  return null;\n}\n\nfunction isDraw(boardState) {\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i] === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId,player,move) => {\n    cb(null,gameId,player,move);\n  });\n}\n\nfunction subToRequestGameState(cb) {\n  socket.on('board-get', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\nfunction subToReturnGameState(cb) {\n  socket.on('board-got', (gameId,board,playerTurn) => {\n    cb(null,gameId,board,playerTurn);\n  });\n}\n\nfunction subToResetAsk(cb) {\n  socket.on('reset-ask', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\nfunction subToResetRes(cb) {\n  socket.on('board-reset', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\nfunction subToOpponentDisconnect(cb) {\n  socket.on('opponent-disconnect', (gameId) => {\n    cb(null,gameId);\n  });\n}\n\n// TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n//    Also get who's turn it is\n// add consent to reset board\n//    if button clicked, ask for reset\n//    if asked for reset, button click will send \"reset\" to all with gameId\n//    if a \"reset\" is received, reset\n// prevent move if not client's turn\n// switch which client is x?\n\nfunction Square(props) {\n  return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n  );\n} // end Square\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      resetAsk: false,\n      playerTurn: 'X',\n      winner:null,\n      opponentConnected: '',\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    // if other player made a move\n    subToMove((err,gameId,player,move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.state.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          playerTurn: (this.props.player==='X')? 'X':'O',\n          squares:squares,\n          winner: winner,\n        });\n        // this.props.onMove(squares);\n      }\n    });\n\n    subToRequestGameState((err,gameId) => {\n      if (gameId===this.props.gameId) {\n        console.log(`board request:${this.state.squares}`);\n        socket.emit('got-board',this.props.gameId,this.state.squares,this.state.playerTurn);\n        this.setState({opponentConnected: 'true'});\n        \n      }\n    });\n\n    subToReturnGameState((err,gameId,board,playerTurn) => {\n      if (gameId===this.props.gameId) {\n        console.log(`board received ${board}`);\n        this.setState({\n          squares: board,\n          playerTurn: playerTurn,\n          opponentConnected: 'true',\n        });\n      }\n    });\n\n    console.log(`joinGameId: ${this.props.joinGameId}`);\n    if (this.props.joinGameId !== '') {\n      socket.emit('get-board',this.props.joinGameId);\n    }\n\n    subToResetAsk((err,gameId) => {\n      if (gameId === this.props.gameId) {\n        this.setState({resetAsk: true});\n      }\n    });\n\n    subToResetRes((err,gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`reset board`);\n        this.setState({\n          playerTurn: (this.state.playerTurn==='O') ? 'O': 'X',\n          squares: Array(9).fill(null),\n          winner: null\n        });\n      }\n    });\n\n    subToOpponentDisconnect((err,gameId) => {\n      if (gameId === this.props.gameId) {\n        console.log(`opponent disconnect`);\n        this.setState({\n          opponentConnected: 'false',\n        });\n      }\n    });\n\n\n\n  }\n\n  handleClick(i) {\n      const squares = this.state.squares.slice();\n\n      // if we are not allowed to make a move (its our turn, there is no winner, and the square is empty)\n      if ((this.state.playerTurn !== this.props.player) || (determineWinner(squares) || squares[i])) {\n        return;\n      }\n      socket.emit('make-move',this.props.gameId,this.props.player, i);\n\n      squares[i] = this.props.player;\n      const winner = determineWinner(squares);\n      this.setState({\n        playerTurn: (this.props.player === 'X')? 'O' : 'X',\n        squares:squares,\n        winner: winner\n      });\n      // console.log(`squares after move: ${squares}`);\n      // this.props.onMove(squares);\n  }\n\n  renderSquare(i) {\n    return <Square \n      value={this.state.squares[i]}\n      onClick={() => this.handleClick(i,this.props.player)}\n      />;\n  }\n\n  resetGame() {\n    if(!this.state.resetAsk) {\n      socket.emit('ask-reset',this.props.gameId);\n    }\n    else {\n      this.setState({resetAsk: false});\n      socket.emit('reset-board',this.props.gameId);\n    }\n  }\n\n  render() {\n    \n    const winner = this.state.winner;\n    let status;\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    }\n    else if (isDraw(this.state.squares)) {\n      status = `Draw! Click reset to clear the board`;\n    }\n    else {\n      status = `Player ${this.state.playerTurn}'s turn`;\n    }\n    return (\n      <div className=\"board\">\n        <p>You are player {this.props.player}</p>\n        <p>{status}</p>\n        <div className=\"board board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        \n        <button className=\"reset-button\" onClick={() => this.resetGame() }>Reset Game</button>\n        {this.state.resetAsk && \n          <p>The other player wants to reset. Click the button to accept</p>\n        }\n\n        <p>Your game id is: {this.props.gameId}</p>\n        {this.state.opponentConnected==='' &&<p>Have opponent join using that game id</p>}\n        {this.state.opponentConnected==='true' &&<p>Opponent connected</p>}\n        {this.state.opponentConnected==='false' &&<p>Opponent disconnected</p>}\n        <button onClick={() => this.props.onDisconnect()}>Disconnect</button>\n\n      </div>\n    );\n  }\n} // end Board\n\nexport default Board;\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}