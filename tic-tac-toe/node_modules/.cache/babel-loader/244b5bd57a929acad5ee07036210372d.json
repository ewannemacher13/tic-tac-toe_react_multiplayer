{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\progs\\\\nodeProgs\\\\tic-tac-toe_react_multi\\\\tic-tac-toe\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from 'react';\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n  const winStates = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a, b, c] = winStates[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nfunction subToTimer(cb) {\n  socket.on('timer', timestamp => cb(null, timestamp));\n  socket.emit('subscribeToTimer', 1000);\n}\n\nfunction subToToggle(tog, cb) {\n  socket.on('toggleButton', (gameId, toggle) => {\n    console.log(`toggle return`);\n    cb(null, gameId, toggle);\n  }); // socket.emit('toggle', tog);\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId, player, move) => {\n    cb(null, gameId, player, move);\n  });\n}\n\nfunction subToGameState(cb) {} // TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n// add consent to reset board\n// prevent move if not client's turn\n// switch which client is x?\n\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 7\n  }, this);\n} // end Square\n\n\n_c = Square;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      player: 'X',\n      winner: null\n    };\n  }\n\n  componentDidMount() {\n    subToMove((err, gameId, player, move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.state.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          squares: squares,\n          player: this.state.player === 'X' ? 'O' : 'X',\n          winner: winner\n        });\n      }\n    });\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n\n    if (determineWinner(squares) || squares[i]) {\n      return;\n    }\n\n    socket.emit('make-move', this.props.gameId, this.state.player, i);\n    squares[i] = this.state.player;\n    const winner = determineWinner(squares);\n    this.setState({\n      squares: squares,\n      player: this.state.player === 'X' ? 'O' : 'X',\n      winner: winner\n    });\n  }\n\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.state.squares[i],\n      onClick: () => this.handleClick(i, this.props.player)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  }\n\n  resetGame() {\n    this.setState({\n      squares: Array(9).fill(null),\n      player: 'X',\n      winner: null\n    });\n  }\n\n  render() {\n    const winner = this.state.winner;\n    let status;\n\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    } else {\n      status = `Player ${this.state.player}'s turn`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: () => this.resetGame(),\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n} // end Board\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callAPI = async () => {\n      const response = await fetch('/b');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      console.log(`api got: ${body.message}`);\n      return body;\n    };\n\n    this.getGameId = async () => {\n      // asks the server to generate a unique game id\n      const postOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          msg: 'h'\n        })\n      };\n      const response = await fetch('/gen', postOptions);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.state = {\n      apiResponse: '',\n      socketResponse: '',\n      gameId: null,\n      timestamp: 'none',\n      toggle: 'False'\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      gameId: event.target.value\n    });\n  }\n\n  toggle() {\n    console.log(`toggle func`); // socket.on('toggleButton', () => {\n    //   this.setState({toggle: (this.state.toggle === 'False') ? 'True' : 'False'});\n    // });\n\n    const tog = this.state.toggle;\n    socket.emit('toggle', this.state.gameId, tog);\n  }\n\n  componentDidMount() {\n    this.callAPI() // .then(res => console.log(res.express))\n    .then(res => this.setState({\n      apiResponse: res.express\n    })).catch(err => console.log(err));\n    this.getGameId().then(res => this.setState({\n      gameId: res.id\n    })).catch(err => console.log(err));\n    subToTimer((err, timestamp) => this.setState({\n      timestamp: timestamp\n    }));\n    subToToggle(this.state.toggle, (err, gameId, toggle) => {\n      if (gameId === this.state.gameId) {\n        console.log(toggle);\n        this.setState({\n          toggle: toggle === 'False' ? 'True' : 'False'\n        });\n      }\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    let x;\n\n    if (this.state.gameId) {\n      x = /*#__PURE__*/_jsxDEV(Board, {\n        gameId: this.state.gameId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this);\n    } else {\n      x = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create or join a room to play!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Api Response: \", this.state.apiResponse]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Socket timestamp: \", this.state.timestamp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.toggle(),\n        children: [\"Toggle state: \", this.state.toggle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to Tic-Tac-Toe!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game Id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: this.state.gameId,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this);\n  }\n\n} // end Game\n\n\nexport default Game; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["C:/progs/nodeProgs/tic-tac-toe_react_multi/tic-tac-toe/src/App.js"],"names":["React","openSocket","socket","determineWinner","boardState","winStates","i","length","a","b","c","subToTimer","cb","on","timestamp","emit","subToToggle","tog","gameId","toggle","console","log","subToMove","player","move","subToGameState","Square","props","onClick","value","Board","Component","constructor","state","squares","Array","fill","winner","componentDidMount","err","slice","setState","handleClick","renderSquare","resetGame","render","status","Game","callAPI","response","fetch","body","json","Error","message","getGameId","postOptions","method","headers","JSON","stringify","msg","apiResponse","socketResponse","handleChange","event","target","then","res","express","catch","id","bind","x"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket();\n\nfunction determineWinner(boardState) {\n  // will come in ['X','O',null,null....]\n  // win states: 3 same horizontal, 3 same vertical, 3 same diagonal\n  \n  // 0 1 2\n  // 3 4 5\n  // 6 7 8\n\n  const winStates = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < winStates.length; i++) {\n    const [a,b,c] = winStates[i];\n    if (boardState[a] &&boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n  return null;\n}\n\nfunction subToTimer(cb) {\n  socket.on('timer', timestamp => cb(null,timestamp));\n  socket.emit('subscribeToTimer',1000);\n}\n\nfunction subToToggle(tog,cb) {\n  socket.on('toggleButton', (gameId,toggle) => {\n    console.log(`toggle return`);\n    cb(null,gameId,toggle)\n  });\n  // socket.emit('toggle', tog);\n}\n\nfunction subToMove(cb) {\n  socket.on('move-made', (gameId,player,move) => {\n    cb(null,gameId,player,move);\n  });\n}\n\nfunction subToGameState(cb) {\n\n}\n\n// TODO:\n// set up \"Create room\" / \"join room\"\n//    create room person will be x\n//    need to create a unique room: var on server?\n// if room changes, get current board state\n// add consent to reset board\n// prevent move if not client's turn\n// switch which client is x?\n\nfunction Square(props) {\n  return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n  );\n} // end Square\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      player:'X',\n      winner:null,\n    };\n  }\n\n  componentDidMount() {\n    subToMove((err,gameId,player,move) => {\n      if (gameId === this.props.gameId) {\n        const squares = this.state.squares.slice();\n        squares[move] = player;\n        const winner = determineWinner(squares);\n        this.setState({\n          squares: squares,\n          player: (this.state.player==='X') ? 'O' : 'X',\n          winner: winner,\n        });\n      }\n    });\n  }\n\n  handleClick(i) {\n      const squares = this.state.squares.slice();\n      if (determineWinner(squares) || squares[i]) {\n        return;\n      }\n      socket.emit('make-move',this.props.gameId,this.state.player, i);\n\n      squares[i] = this.state.player;\n      const winner = determineWinner(squares);\n      this.setState({\n        squares: squares,\n        player: (this.state.player==='X') ? 'O' : 'X',\n        winner: winner\n      });\n  }\n\n  renderSquare(i) {\n    return <Square \n      value={this.state.squares[i]}\n      onClick={() => this.handleClick(i,this.props.player)}\n      />;\n  }\n\n  resetGame() {\n    this.setState({\n      squares: Array(9).fill(null),\n      player: 'X',\n      winner:null,\n    });\n  }\n\n  render() {\n    const winner = this.state.winner;\n    let status;\n    if (winner) {\n      status = `Player ${winner} wins!`;\n    }\n    else {\n      status = `Player ${this.state.player}'s turn`;\n    }\n    return (\n      <div className=\"board\">\n        <p>{status}</p>\n        <div className=\"board board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        \n        <button className=\"reset-button\" onClick={() => this.resetGame() }>Reset Game</button>\n      </div>\n    );\n  }\n} // end Board\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse:'',\n      socketResponse:'',\n      gameId: null,\n      timestamp: 'none',\n      toggle: 'False',\n\n      \n    };\n  }\n\n  handleChange(event) {\n    this.setState({gameId: event.target.value});\n  }\n\n  toggle() {\n    console.log(`toggle func`);\n    // socket.on('toggleButton', () => {\n    //   this.setState({toggle: (this.state.toggle === 'False') ? 'True' : 'False'});\n    // });\n    const tog = this.state.toggle;\n    socket.emit('toggle',this.state.gameId,tog);\n  }\n\n  callAPI = async () => {\n    const response = await fetch('/b');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    console.log(`api got: ${body.message}`);\n\n    return body;\n  }\n\n  getGameId = async () => {\n    // asks the server to generate a unique game id\n\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({msg:'h'})\n    };\n\n    const response = await fetch('/gen',postOptions);\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n\n  }\n\n  componentDidMount() {\n    this.callAPI()\n      // .then(res => console.log(res.express))\n      .then(res => this.setState({apiResponse: res.express}))\n      .catch(err => console.log(err));\n\n    this.getGameId()\n    .then(res => this.setState({gameId: res.id}))\n    .catch(err => console.log(err));\n\n    subToTimer((err,timestamp) => this.setState({timestamp:timestamp}));\n    subToToggle(this.state.toggle,(err,gameId,toggle) => {\n      if (gameId===this.state.gameId) {\n        console.log(toggle);\n        this.setState({toggle: (toggle==='False') ? 'True' : 'False'});\n      }\n    });\n  \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  \n\n  render() {\n    let x;\n    if (this.state.gameId) {\n      x = <Board \n        gameId={this.state.gameId}\n      />;\n    }\n    else {\n      x = <p>Create or join a room to play!</p>;\n    }\n    return (\n        <div className=\"Game\">\n          <p>Api Response: {this.state.apiResponse}</p>\n          <p>Socket timestamp: {this.state.timestamp}</p>\n          <button onClick={() => this.toggle()}>Toggle state: {this.state.toggle}</button>\n          \n          <p>Welcome to Tic-Tac-Toe!</p>\n          <div >\n            x\n          </div>\n          <p>Game Id:</p>\n          <input type=\"text\" value={this.state.gameId} onChange={this.handleChange} />\n          {/* <p>Your game id is: {this.state.gameId}</p> */}\n        </div>\n      \n    );\n  }\n} // end Game\n\nexport default Game;\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to refresh.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}